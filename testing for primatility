import time
import matplotlib.pyplot as plt
import math

def is_prime(n):
    """
    Test if an integer n is prime using trial division up to sqrt(n).
    Returns a tuple (is_prime, steps) where is_prime is a boolean and steps is an integer.
    Handles positive, negative integers, and edge cases.
    """
    # Handle edge cases and negative numbers
    n = abs(n)  # Use absolute value for negative numbers
    if n < 2:
        return False, 0  # Numbers less than 2 are not prime, 0 steps
    if n == 2:
        return True, 0   # 2 is prime, 0 steps
    if n % 2 == 0:
        return False, 1  # Even numbers > 2 are not prime, 1 step for modulo
    
    # Trial division up to sqrt(n)
    steps = 1  # Start with 1 for the modulo 2 check
    sqrt_n = int(math.sqrt(n))
    for i in range(3, sqrt_n + 1, 2):  # Check odd numbers only
        steps += 1
        if n % i == 0:
            return False, steps
    return True, steps

# Compute sum of primes between 3 and 1000
def sum_primes_3_to_1000():
    """
    Calculate the sum of all prime numbers between 3 and 1000.
    Returns the sum and prints each prime for verification.
    """
    total = 0
    print("Prime numbers between 3 and 1000:")
    for n in range(3, 1001):
        is_p, _ = is_prime(n)
        if is_p:
            print(n, end=" ")
            total += n
    print("\nSum of primes:", total)
    return total

# Test the is_prime function with sample inputs
print("Testing is_prime function:")
test_values = [-17, -4, 0, 1, 2, 3, 4, 17, 25]
for n in test_values:
    result, steps = is_prime(n)
    print(f"n = {n:3d}, is_prime = {result}, steps = {steps}")

# Compute sum of primes
sum_primes_3_to_1000()

# Prepare data for graphing
digits = list(range(1, 19))  # Number of digits from 1 to 18
steps_list = []
time_list = []

for k in digits:
    n = 10 ** (k - 1)  # Integer with k digits, e.g., 1, 10, 100, ..., 10^17
    start_time = time.perf_counter()  # High-precision timer start
    result, steps = is_prime(n)
    end_time = time.perf_counter()  # Timer end
    time_taken = end_time - start_time
    steps_list.append(steps)
    time_list.append(time_taken)

# Plot 1: Number of steps vs. number of digits
plt.figure(figsize=(8, 6))
plt.plot(digits, steps_list, marker='o', color='blue')
plt.xlabel('Number of Digits')
plt.ylabel('Number of Steps')
plt.title('Number of Steps vs. Number of Digits')
plt.grid(True)

# Plot 2: Time taken vs. number of digits
plt.figure(figsize=(8, 6))
plt.plot(digits, time_list, marker='o', color='red')
plt.xlabel('Number of Digits')
plt.ylabel('Time Taken (seconds)')
plt.title('Time Taken vs. Number of Digits')
plt.grid(True)

# Display both plots
plt.show()